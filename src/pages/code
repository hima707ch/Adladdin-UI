// pages/InterviewRoom.jsx
import React, { useState, useEffect, useRef } from 'react';
import { useParams, useNavigate } from 'react-router-dom';

const InterviewRoom = ({ user }) => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [interview, setInterview] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [messages, setMessages] = useState([]);
  const [inputMessage, setInputMessage] = useState('');
  const [currentQuestion, setCurrentQuestion] = useState(null);
  const [interviewStatus, setInterviewStatus] = useState('waiting'); // waiting, active, completed
  const [timer, setTimer] = useState(null);
  const [remainingTime, setRemainingTime] = useState(0);
  const [feedback, setFeedback] = useState({
    rating: 0,
    comment: '',
  });
  
  const messagesEndRef = useRef(null);
  const timerInterval = useRef(null);

  // Mock interview data
  useEffect(() => {
    const fetchInterview = async () => {
      try {
        // Mock API call
        setTimeout(() => {
          // For demo, create mock data based on the interview ID
          const mockInterview = {
            id,
            title: 'Frontend Developer Interview',
            date: new Date().toISOString(),
            duration: 30, // minutes
            partner: {
              id: '2',
              name: 'Jane Smith',
              role: 'professional',
              skills: ['JavaScript', 'React', 'CSS'],
              avatar: '/api/placeholder/100/100'
            },
            type: 'interviewer', // or 'interviewee'
            status: 'scheduled',
            questions: [
              {
                id: '1',
                text: 'Can you explain how React\'s virtual DOM works?'
              },
              {
                id: '2',
                text: 'What are React hooks and how do they improve functional components?'
              },
              {
                id: '3',
                text: 'How would you handle state management in a large React application?'
              },
              {
                id: '4',
                text: 'Explain the concept of CSS specificity and how it affects styling.'
              },
              {
                id: '5',
                text: 'What are the advantages of using Typescript with React?'
              }
            ]
          };
          
          setInterview(mockInterview);
          setLoading(false);
        }, 1500);
      } catch (err) {
        setError('Failed to load interview. Please try again.');
        setLoading(false);
      }
    };

    fetchInterview();
  }, [id]);

  // Scroll to bottom of messages when new messages are added
  useEffect(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [messages]);

  // Timer functionality
  useEffect(() => {
    if (interviewStatus === 'active' && timer) {
      setRemainingTime(timer * 60); // Convert minutes to seconds
      
      timerInterval.current = setInterval(() => {
        setRemainingTime(prevTime => {
          if (prevTime <= 1) {
            clearInterval(timerInterval.current);
            // Maybe trigger interview end
            return 0;
          }
          return prevTime - 1;
        });
      }, 1000);
    }

    return () => {
      if (timerInterval.current) {
        clearInterval(timerInterval.current);
      }
    };
  }, [interviewStatus, timer]);

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  const startInterview = () => {
    setInterviewStatus('active');
    setTimer(interview.duration);
    
    // Add a system message
    setMessages(prevMessages => [
      ...prevMessages,
      {
        id: Date.now(),
        sender: 'system',
        text: 'The interview has started. Good luck!',
        timestamp: new Date().toISOString()
      }
    ]);
  };

  const endInterview = () => {
    if (timerInterval.current) {
      clearInterval(timerInterval.current);
    }
    
    setInterviewStatus('completed');
    
    // Add a system message
    setMessages(prevMessages => [
      ...prevMessages,
      {
        id: Date.now(),
        sender: 'system',
        text: 'The interview has ended. Please provide feedback.',
        timestamp: new Date().toISOString()
      }
    ]);
  };

  const handleSendMessage = (e) => {
    e.preventDefault();
    
    if (!inputMessage.trim()) return;
    
    // Add the new message
    const newMessage = {
      id: Date.now(),
      sender: 'you',
      text: inputMessage,
      timestamp: new Date().toISOString()
    };
    
    setMessages(prevMessages => [...prevMessages, newMessage]);
    setInputMessage('');
    
    // Mock response from partner (for demo purposes)
    setTimeout(() => {
      const partnerResponse = {
        id: Date.now() + 1,
        sender: 'partner',
        text: interview.type === 'interviewee' 
          ? 'That\'s a good point. Let me ask you another question...' 
          : 'Thanks for the question. Let me think about that...',
        timestamp: new Date().toISOString()
      };
      
      setMessages(prevMessages => [...prevMessages, partnerResponse]);
    }, 2000);
  };

  const selectQuestion = (question) => {
    setCurrentQuestion(question);
    setInputMessage(question.text);
  };

  const handleRatingChange = (rating) => {
    setFeedback(prev => ({ ...prev, rating }));
  };

  const handleCommentChange = (e) => {
    setFeedback(prev => ({ ...prev, comment: e.target.value }));
  };

  const submitFeedback = () => {
    // In a real app, submit to backend
    console.log('Feedback submitted:', feedback);
    
    // Navigate to dashboard
    setTimeout(() => {
      navigate('/dashboard');
    }, 1500);
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gray-50">
        <div className="text-center">
          <div className="w-16 h-16 border-t-4 border-blue-500 border-solid rounded-full animate-spin"></div>
          <p className="mt-4 text-gray-600">Loading interview room...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        <div className="px-4 py-6 sm:px-0">
          <div className="bg-red-50 border border-red-200 rounded-md p-4">
            <div className="flex">
              <div className="flex-shrink-0">
                <svg className="h-5 w-5 text-red-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                </svg>
              </div>
              <div className="ml-3">
                <h3 className="text-sm font-medium text-red-800">Error</h3>
                <div className="mt-2 text-sm text-red-700">
                  <p>{error}</p>
                </div>
                <div className="mt-4">
                  <button
                    type="button"
                    onClick={() => navigate('/dashboard')}
                    className="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-red-700 bg-red-100 hover:bg-red-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
                  >
                    Back to Dashboard
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-gray-50 min-h-screen">
      <div className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        {/* Interview Header */}
        <div className="px-4 sm:px-0 mb-4">
          <div className="bg-white shadow-sm rounded-lg p-4 md:p-6">
            <div className="flex flex-col md:flex-row justify-between items-start md:items-center">
              <div>
                <h1 className="text-xl font-bold text-gray-900">{interview.title}</h1>
                <p className="text-sm text-gray-500 mt-1">
                  You are the <span className="font-medium">{interview.type}</span>
                </p>
              </div>
              
              <div className="mt-4 md:mt-0 flex items-center">
                {interviewStatus === 'waiting' && (
                  <button
                    onClick={startInterview}
                    className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                  >
                    Start Interview
                  </button>
                )}
                
                {interviewStatus === 'active' && (
                  <>
                    <div className="mr-4 text-sm">
                      <span className="font-medium">Time remaining:</span>{' '}
                      <span className={`${remainingTime < 300 ? 'text-red-600' : 'text-gray-900'}`}>
                        {formatTime(remainingTime)}
                      </span>
                    </div>
                    <button
                      onClick={endInterview}
                      className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
                    >
                      End Interview
                    </button>
                  </>
                )}
              </div>
            </div>
            
            {/* Partner info */}
            <div className="mt-4 p-3 bg-gray-50 rounded-md flex items-center">
              <img 
                src={interview.partner.avatar}
                alt={interview.partner.name}
                className="w-10 h-10 rounded-full mr-3"
              />
              <div>
                <h3 className="text-sm font-medium text-gray-900">{interview.partner.name}</h3>
                <p className="text-xs text-gray-500">
                  {interview.partner.role}{' · '}
                  {interview.partner.skills.join(', ')}
                </p>
              </div>
            </div>
          </div>
        </div>
        
        <div className="px-4 sm:px-0">
          <div className="flex flex-col lg:flex-row space-y-4 lg:space-y-0 lg:space-x-4">
            {/* Main chat area */}
            <div className="lg:flex-grow bg-white shadow-sm rounded-lg overflow-hidden">
              {interviewStatus === 'completed' ? (
                <div className="p-6">
                  <h2 className="text-xl font-bold text-gray-900 mb-6">Provide Feedback</h2>
                  
                  <div className="mb-6">
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      How would you rate this interview experience?
                    </label>
                    <div className="flex">
                      {[1, 2, 3, 4, 5].map((star) => (
                        <button
                          key={star}
                          type="button"
                          onClick={() => handleRatingChange(star)}
                          className="text-2xl focus:outline-none"
                        >
                          <span className={star <= feedback.rating ? 'text-yellow-400' : 'text-gray-300'}>
                            ★
                          </span>
                        </button>
                      ))}
                    </div>
                  </div>
                  
                  <div className="mb-6">
                    <label htmlFor="feedback" className="block text-sm font-medium text-gray-700 mb-2">
                      Additional comments
                    </label>
                    <textarea
                      id="feedback"
                      rows={4}
                      className="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md"
                      placeholder="Share your thoughts on the interview..."
                      value={feedback.comment}
                      onChange={handleCommentChange}
                    ></textarea>
                  </div>
                  
                  <div className="flex justify-end">
                    <button
                      type="button"
                      onClick={submitFeedback}
                      disabled={feedback.rating === 0}
                      className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50"
                    >
                      Submit Feedback
                    </button>
                  </div>
                </div>
              ) : (
                <>
                  {/* Messages */}
                  <div className="h-96 overflow-y-auto p-4 flex flex-col space-y-3">
                    {messages.length === 0 && interviewStatus ===